#pragma once
#include <string>
#include <vector>
using namespace std;

class Medicine
{
private:


	/// <summary>	The name of a Medicine. </summary>
	string name;


	/// <summary>	The concentration of a Medicine. </summary>
	double concentration;


	/// <summary>	The price of a Medicine. </summary>
	double price;


	/// <summary>	The quantity of a Medicine. </summary>
	int quantity;

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor of the Medicine. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	Medicine();



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor with given Medicine parameters. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <param name="n">	A Medicine string(Name) to process. </param>
	/// <param name="c">	A Medicine double(Concentration) to process. </param>
	/// <param name="p">	A Medicine double(Price) to process. </param>
	/// <param name="q">	An Medicine int(Quantity) to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	Medicine(string n, double c, double p, int q);



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the name of a Medicine. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <returns>	The name of the Medicine. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	string get_name() { return name; }



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the concentration of a Medicine. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <returns>	The concentration of the Medicine. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	double get_concentration() { return concentration;  }



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the price of a Medicine. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <returns>	The price of the Medicine. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	double get_price() { return price; }



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the quantity of a Medicine. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <returns>	The quantity of the Medicine. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	int get_quantity() { return quantity;  }



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a name of a Medicine to the given value. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <param name="N">	[in,out] A Medicine string(Name) to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void set_name(string& N) { name = N; }



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a concentration of a Medicine to the given value. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <param name="C">	[in,out] A Medicine double(Concentration) to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void set_concentration(double& C) { concentration = C; }



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a price of a Medicine to the given value. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <param name="P">	[in,out] A Medicine double(Price) to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void set_price(double& P) { price = P; }



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a quantity of a Medicine to the given value. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <param name="Q">	[in,out] an Medicine int(Quantity) to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void set_quantity(int& Q) { quantity = Q; }



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Adds the given value to the quantity of a Medicine. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <param name="QuantityToAdd">	[in,out] The quantity to add to a Medicine. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void add_to_quantity(int& QuantityToAdd) { quantity += QuantityToAdd; }



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Less-than comparison operator for Medicines. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <param name="obj">	The object. </param>
	///
	/// <returns>	True if the first Medicine is less than the second Medicine. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool operator< (const Medicine& obj) const
	{
		return (this->name < obj.name);
	}



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor of the Medicine. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	~Medicine();



	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Convert this Medicine into a string representation. </summary>
	///
	/// <remarks>	Pinko, 4/13/2020. </remarks>
	///
	/// <returns>	A string that represents this Medicine. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	string ToString();



};

////////////////////////////////////////////////////////////////////////////////////////////////////
// End of Medikament.h
////////////////////////////////////////////////////////////////////////////////////////////////////

